Traceback (most recent call last):
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/nbclient/client.py", line 1093, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/nbclient/client.py", line 559, in async_execute
    await self.async_execute_cell(
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/nbclient/client.py", line 854, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/nbclient/client.py", line 756, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Algorithm: Metropolis  Harmonic oscillator  

# np.random.ranf() calculates one random number in the range 0 - 1

n = 20000                         # number of samples
deltax= 0.4                       # max displacement
kB    = 1.38e-5                   # in kg/nm^2/s^2/K == 1.38e^(-23) J/k
nm    = 1e-9
T     = 300.0
kBT   = kB*T
Etot  = 0.0                       # initial <E>
E2tot = 0.0
k     = 10.0                      # force constant 
V = lambda x: 0.5*k*x**2          # potential energy PE 
x1= 0.0                           # first guess of x
E1= V(x1)                         # first guess of PE 
for i in range(n):                # start loop step(2)
    
    x2 = x1 + (np.random.ranf()-0.5)*deltax       #new x position 
    E2 = V(x2)                                    # new PE
    DeltaE = E2 - E1                              # energy difference
    # next line is Metropolis parts(2) in algorithm
    if DeltaE <= 0.0 or np.exp(-DeltaE/kBT) > np.random.ranf() :
        x1= x2                    # save new configuration 
        E1= E2                    # save new energy
        pass
    Etot = Etot + E1              # always add to total 
    E2tot= E2tot + E1**2          # add to total <E^2>
    pass
Eav = nm**2*Etot/n;               # average step (5) & put back into real units
E2av= nm**4*E2tot/n;
CV= (E2av-Eav**2)/(kB*T**2)/nm**2
print('{:s} {:8.4g} {:s} {:8.4g} {:s} {:8.4g}'.format('av E=',Eav, 'av e^2=',E2av,'Cv=',CV) )
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
[0;32m/var/folders/gn/whk4pp2x4kz_ftg0b1ycmh340000gn/T/ipykernel_22398/1402890907.py[0m in [0;36m<module>[0;34m[0m
[1;32m     17[0m [0;32mfor[0m [0mi[0m [0;32min[0m [0mrange[0m[0;34m([0m[0mn[0m[0;34m)[0m[0;34m:[0m                [0;31m# start loop step(2)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     18[0m [0;34m[0m[0m
[0;32m---> 19[0;31m     [0mx2[0m [0;34m=[0m [0mx1[0m [0;34m+[0m [0;34m([0m[0mnp[0m[0;34m.[0m[0mrandom[0m[0;34m.[0m[0mranf[0m[0;34m([0m[0;34m)[0m[0;34m-[0m[0;36m0.5[0m[0;34m)[0m[0;34m*[0m[0mdeltax[0m       [0;31m#new x position[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     20[0m     [0mE2[0m [0;34m=[0m [0mV[0m[0;34m([0m[0mx2[0m[0;34m)[0m                                    [0;31m# new PE[0m[0;34m[0m[0;34m[0m[0m
[1;32m     21[0m     [0mDeltaE[0m [0;34m=[0m [0mE2[0m [0;34m-[0m [0mE1[0m                              [0;31m# energy difference[0m[0;34m[0m[0;34m[0m[0m

[0;31mNameError[0m: name 'np' is not defined
NameError: name 'np' is not defined

