Traceback (most recent call last):
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/nbclient/client.py", line 1093, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/nbclient/client.py", line 559, in async_execute
    await self.async_execute_cell(
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/nbclient/client.py", line 854, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/nbclient/client.py", line 756, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Algorithm. Levenburg - Marquardt non-linear least squares.

def chisqrd(n):
    s = 0.0
    for i in range(n):
        s = s + w[i]*(yval[i] - model(xval[i],C) )**2
    return s
#------------------------------

def getdata(filename):
    xv = []
    yv = []
    wv = []
    with open(filename) as f:               # length not known so read in all data and make list of each
        i=0
        for line in f:
            new_str = ' '.join(line.split())
            vals = new_str.split(' ')
            xv.append(vals[0]) 
            yv.append(vals[1]) 
            wv.append(vals[2]) 
    f.close()
    n = len(xv)                             # we do not know length of data before hand 
    w = np.zeros(n,dtype=float)
    xval = np.zeros(n,dtype=float)
    yval = np.zeros(n,dtype=float)
    for i in range(n):
        w[i] = 1/float(wv[i])               # counting weighting
        xval[i] = float(xv[i])
        yval[i] = float(yv[i])
    return xval,yval,w
#--------------------------------     

# fitting model   y = c1.exp(-c2.x) + c3

filename='exponential data.txt'  # in rows x , y weighting

xval,yval,w = getdata(filename)

n = len(xval)
lambd= 0.001            # initial value
reps = 40               # typoical value can be altered 
C = [2*yval[0],0.55,5]  # initial guessed values
m = len(C)
model = lambda x,C: C[0]*np.exp( -C[1]*x ) + C[2]  # function to be fitted 

nf   = n - m - 1                                   # degrees of freedom
chiB = 1e20                                        # choose initial value to be huge

B = np.zeros(m,dtype=float)
A = np.zeros((m,m),dtype=float)
deriv = np.zeros((3,n),dtype=float)

for L in range(reps):
    beta= np.zeros(m,dtype=float)
    AA  = np.zeros((m,m),dtype=float)
    for i in range(n):
        deriv[0,i] = np.exp(-C[1]*xval[i])               # dy/dC[0]
        deriv[1,i] = -C[0]*xval[i]*np.exp(-C[1]*xval[i]) # dy/dC[1]
        deriv[2,i] = 1.0                                 # dy/dC[2]
        pass
    chiA = chisqrd(n)/nf
    
    for j in range(m):
        s = 0.0
        for i in range(n):
            s = s + w[i]*(yval[i] - model(xval[i],C) )*deriv[j,i]
        beta[j] = s
        for k in range(1+j):
            s = 0.0
            for i in range(n):
                s = s + w[i]*deriv[j,i]*deriv[k,i] 
            AA[j,k] = s
        pass
    
    if np.abs(chiA - chiB) <= 0.001:
        break
    AA = ( np.transpose(AA) + AA )/2.0                   # symmetrise
    while chiB > chiA:                                   # step iii
        for j in range(m):
            for k in range(m):
                A[j,k] = AA[j,k]/np.sqrt( AA[j,j]*AA[k,k] )
            A[j,j] = 1.0 + lambd
            pass
        A = np.linalg.inv(A)
        for j in range(m):
            s = 0.0
            for ii in range(m):
                s = s + beta[ii]*A[j,ii]/np.sqrt( AA[j,j]*AA[ii,ii] )    
            B[j] = C[j]+ s
            pass
        chiB = chisqrd(n)/nf                                
        lambd = lambd*10          # step iv
        pass                      # end while step iii  ChiB > chiA
    C = B                         # replace coeffs
    chiB  = chiA                  # replace chi^2
    lambd = lambd/10              # step iv
    pass                          # end loop on L 
    
sig = np.zeros( m, dtype = float)
for j in range(m):
    sig[j] = np.sqrt( A[j,j]/( AA[j,j] ) )

for i in range(m):
    print('{:s}{:d}{:s}{:8.4g}{:s}{:6.2g}'.format('C',i+1,' = ', C[i],' +/- ',sig[i]) )
print('{:s}{:6.3f}'.format('reduced chi sqrd = ',chiA))
print('{:s}{:8.4g}'.format('total calculated counts   =',np.sum(model(xval[:],C[:]))) )
print('{:s}{:8.4g}'.format('total experimental counts =',np.sum(yval[:] ) ) )
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
[0;32m/var/folders/gn/whk4pp2x4kz_ftg0b1ycmh340000gn/T/ipykernel_23958/3353314872.py[0m in [0;36m<module>[0;34m[0m
[1;32m     36[0m [0mfilename[0m[0;34m=[0m[0;34m'exponential data.txt'[0m  [0;31m# in rows x , y weighting[0m[0;34m[0m[0;34m[0m[0m
[1;32m     37[0m [0;34m[0m[0m
[0;32m---> 38[0;31m [0mxval[0m[0;34m,[0m[0myval[0m[0;34m,[0m[0mw[0m [0;34m=[0m [0mgetdata[0m[0;34m([0m[0mfilename[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     39[0m [0;34m[0m[0m
[1;32m     40[0m [0mn[0m [0;34m=[0m [0mlen[0m[0;34m([0m[0mxval[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/var/folders/gn/whk4pp2x4kz_ftg0b1ycmh340000gn/T/ipykernel_23958/3353314872.py[0m in [0;36mgetdata[0;34m(filename)[0m
[1;32m     12[0m     [0myv[0m [0;34m=[0m [0;34m[[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[1;32m     13[0m     [0mwv[0m [0;34m=[0m [0;34m[[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 14[0;31m     [0;32mwith[0m [0mopen[0m[0;34m([0m[0mfilename[0m[0;34m)[0m [0;32mas[0m [0mf[0m[0;34m:[0m               [0;31m# length not known so read in all data and make list of each[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     15[0m         [0mi[0m[0;34m=[0m[0;36m0[0m[0;34m[0m[0;34m[0m[0m
[1;32m     16[0m         [0;32mfor[0m [0mline[0m [0;32min[0m [0mf[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'exponential data.txt'
FileNotFoundError: [Errno 2] No such file or directory: 'exponential data.txt'

