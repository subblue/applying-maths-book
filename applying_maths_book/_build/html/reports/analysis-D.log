Traceback (most recent call last):
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/nbclient/client.py", line 1093, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/nbclient/client.py", line 559, in async_execute
    await self.async_execute_cell(
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/nbclient/client.py", line 854, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/Users/godfreybeddard/Library/Python/3.8/lib/python/site-packages/nbclient/client.py", line 756, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Algorithm Pricipal component analysis

filename='PCA data.txt'                    # 3 sets of data 10 values each
# data is at end of book in 'Appendix, some basic Python instructions'

xv = []
yv = []
zv = []
with open(filename) as ff:                 # length not known so read in all data and make list of each
    for line in ff:
        new_str = ' '.join(line.split())
        vals = new_str.split(' ')
        xv.append(vals[0]) 
        yv.append(vals[1]) 
        zv.append(vals[2]) 
ff.close()

n = len(xv)                               # get length of data 
m = 3                                     # 3 axes of data
data = np.zeros((n,m),dtype=float) 
for i in range(n): 
    data[i,0] = float(xv[i])              # make lists into arrays, data set 0,1,2 with n values each
    data[i,1] = float(yv[i])
    data[i,2] = float(zv[i])
    
# finished reading     

S = 1                                     # select first S components eigenvals
means = np.zeros((n,m),dtype=float) 
X     = np.zeros((n,m),dtype=float)  
VS    = np.zeros((m,m),dtype=float )
Sev   = np.zeros(m,dtype=float)

for k in range(m):                         # calculate mean value
    s = 0
    for i in range(n):
        s = s + data[i,k]
    means[:,k] = s/n  
    pass 
X = data - means                           # subtract mean 
C = np.transpose(X) @ X/(n-1)              # make covariance matrix ( @ is matrix multiply)

(eigval,eigvec) = lina.eig(C)              # eigvals, eigvects of covariance. eigvects normalised

indx = np.argsort(eigval)               

Sev[:] = eigval[  indx[::-1]]              # reverse indx array to get largest first
VS[:,:]= eigvec[:,indx[::-1]]

print('eigenvalues and eigenvectors')
for i in range(m):
    print(i+1,Sev[i], VS[:,i]) 

V = np.zeros((m,S))                        # do PCA here DR is result                      
V[:,:] = VS[:,0:S]                         # select S sorted eigenvectors

Y  = np.transpose(V) @ np.transpose(X)     # project onto S new axes 

DR = np.transpose(V @ Y) + means           # DR is data on new axes 
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mZeroDivisionError[0m                         Traceback (most recent call last)
[0;32m/var/folders/gn/whk4pp2x4kz_ftg0b1ycmh340000gn/T/ipykernel_12286/3428373870.py[0m in [0;36m<module>[0;34m[0m
[1;32m     36[0m     [0;32mfor[0m [0mi[0m [0;32min[0m [0mrange[0m[0;34m([0m[0mn[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     37[0m         [0ms[0m [0;34m=[0m [0ms[0m [0;34m+[0m [0mdata[0m[0;34m[[0m[0mi[0m[0;34m,[0m[0mk[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 38[0;31m     [0mmeans[0m[0;34m[[0m[0;34m:[0m[0;34m,[0m[0mk[0m[0;34m][0m [0;34m=[0m [0ms[0m[0;34m/[0m[0mn[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     39[0m     [0;32mpass[0m[0;34m[0m[0;34m[0m[0m
[1;32m     40[0m [0mX[0m [0;34m=[0m [0mdata[0m [0;34m-[0m [0mmeans[0m                           [0;31m# subtract mean[0m[0;34m[0m[0;34m[0m[0m

[0;31mZeroDivisionError[0m: division by zero
ZeroDivisionError: division by zero

